-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity func is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of func is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "func_func,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.777000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.027210,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1740,HLS_SYN_LUT=1880,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal N : STD_LOGIC_VECTOR (31 downto 0);
    signal x : STD_LOGIC_VECTOR (63 downto 0);
    signal y : STD_LOGIC_VECTOR (63 downto 0);
    signal z : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln7_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_161 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal icmp_ln7_1_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter71_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal y_read_reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal x_read_reg_357 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln7_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_block_state74_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state146_pp0_stage0_iter72 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal gmem_addr_1_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_250_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter26_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter27_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter28_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter29_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter30_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter31_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter32_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter33_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter34_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter35_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_385_pp0_iter36_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_addr_2_reg_390 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_2_fu_279_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter26_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter27_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter28_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter29_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter30_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter31_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter32_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter33_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter34_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter35_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_2_reg_396_pp0_iter36_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln7_1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_401_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_read_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_1_fu_309_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln9_1_reg_410 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_predicate_op194_writereq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state75_pp0_stage1_iter36 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal gmem_addr_2_read_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_3_fu_329_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln9_3_reg_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln9_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln9_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal sext_ln7_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln9_2_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln9_3_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln7_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_174_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln9_fu_213_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln9_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln9_fu_225_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_4_fu_230_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln9_1_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_5_fu_259_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln9_1_fu_293_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln9_1_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln9_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln9_2_fu_313_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln9_2_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln9_1_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component func_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component func_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        N : OUT STD_LOGIC_VECTOR (31 downto 0);
        x : OUT STD_LOGIC_VECTOR (63 downto 0);
        y : OUT STD_LOGIC_VECTOR (63 downto 0);
        z : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component func_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component func_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        N => N,
        x => x,
        y => y,
        z => z,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_m_axi_U : component func_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 70,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_369,
        I_AWLEN => N,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => mul_ln9_reg_425,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    mul_16s_16s_32_1_1_U1 : component func_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => trunc_ln9_3_reg_420,
        din1 => trunc_ln9_1_reg_410,
        dout => mul_ln9_fu_339_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    first_iter_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                first_iter_0_reg_161 <= ap_const_lv1_1;
            elsif (((icmp_ln7_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                first_iter_0_reg_161 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_94 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_fu_202_p2 = ap_const_lv1_0))) then 
                i_fu_94 <= add_ln7_fu_207_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_addr_1_read_reg_405 <= gmem_RDATA;
                gmem_addr_1_reg_379 <= sext_ln9_2_fu_240_p1;
                gmem_addr_2_reg_390 <= sext_ln9_3_fu_269_p1;
                icmp_ln7_1_reg_401 <= icmp_ln7_1_fu_283_p2;
                icmp_ln7_1_reg_401_pp0_iter10_reg <= icmp_ln7_1_reg_401_pp0_iter9_reg;
                icmp_ln7_1_reg_401_pp0_iter11_reg <= icmp_ln7_1_reg_401_pp0_iter10_reg;
                icmp_ln7_1_reg_401_pp0_iter12_reg <= icmp_ln7_1_reg_401_pp0_iter11_reg;
                icmp_ln7_1_reg_401_pp0_iter13_reg <= icmp_ln7_1_reg_401_pp0_iter12_reg;
                icmp_ln7_1_reg_401_pp0_iter14_reg <= icmp_ln7_1_reg_401_pp0_iter13_reg;
                icmp_ln7_1_reg_401_pp0_iter15_reg <= icmp_ln7_1_reg_401_pp0_iter14_reg;
                icmp_ln7_1_reg_401_pp0_iter16_reg <= icmp_ln7_1_reg_401_pp0_iter15_reg;
                icmp_ln7_1_reg_401_pp0_iter17_reg <= icmp_ln7_1_reg_401_pp0_iter16_reg;
                icmp_ln7_1_reg_401_pp0_iter18_reg <= icmp_ln7_1_reg_401_pp0_iter17_reg;
                icmp_ln7_1_reg_401_pp0_iter19_reg <= icmp_ln7_1_reg_401_pp0_iter18_reg;
                icmp_ln7_1_reg_401_pp0_iter1_reg <= icmp_ln7_1_reg_401;
                icmp_ln7_1_reg_401_pp0_iter20_reg <= icmp_ln7_1_reg_401_pp0_iter19_reg;
                icmp_ln7_1_reg_401_pp0_iter21_reg <= icmp_ln7_1_reg_401_pp0_iter20_reg;
                icmp_ln7_1_reg_401_pp0_iter22_reg <= icmp_ln7_1_reg_401_pp0_iter21_reg;
                icmp_ln7_1_reg_401_pp0_iter23_reg <= icmp_ln7_1_reg_401_pp0_iter22_reg;
                icmp_ln7_1_reg_401_pp0_iter24_reg <= icmp_ln7_1_reg_401_pp0_iter23_reg;
                icmp_ln7_1_reg_401_pp0_iter25_reg <= icmp_ln7_1_reg_401_pp0_iter24_reg;
                icmp_ln7_1_reg_401_pp0_iter26_reg <= icmp_ln7_1_reg_401_pp0_iter25_reg;
                icmp_ln7_1_reg_401_pp0_iter27_reg <= icmp_ln7_1_reg_401_pp0_iter26_reg;
                icmp_ln7_1_reg_401_pp0_iter28_reg <= icmp_ln7_1_reg_401_pp0_iter27_reg;
                icmp_ln7_1_reg_401_pp0_iter29_reg <= icmp_ln7_1_reg_401_pp0_iter28_reg;
                icmp_ln7_1_reg_401_pp0_iter2_reg <= icmp_ln7_1_reg_401_pp0_iter1_reg;
                icmp_ln7_1_reg_401_pp0_iter30_reg <= icmp_ln7_1_reg_401_pp0_iter29_reg;
                icmp_ln7_1_reg_401_pp0_iter31_reg <= icmp_ln7_1_reg_401_pp0_iter30_reg;
                icmp_ln7_1_reg_401_pp0_iter32_reg <= icmp_ln7_1_reg_401_pp0_iter31_reg;
                icmp_ln7_1_reg_401_pp0_iter33_reg <= icmp_ln7_1_reg_401_pp0_iter32_reg;
                icmp_ln7_1_reg_401_pp0_iter34_reg <= icmp_ln7_1_reg_401_pp0_iter33_reg;
                icmp_ln7_1_reg_401_pp0_iter35_reg <= icmp_ln7_1_reg_401_pp0_iter34_reg;
                icmp_ln7_1_reg_401_pp0_iter36_reg <= icmp_ln7_1_reg_401_pp0_iter35_reg;
                icmp_ln7_1_reg_401_pp0_iter37_reg <= icmp_ln7_1_reg_401_pp0_iter36_reg;
                icmp_ln7_1_reg_401_pp0_iter38_reg <= icmp_ln7_1_reg_401_pp0_iter37_reg;
                icmp_ln7_1_reg_401_pp0_iter39_reg <= icmp_ln7_1_reg_401_pp0_iter38_reg;
                icmp_ln7_1_reg_401_pp0_iter3_reg <= icmp_ln7_1_reg_401_pp0_iter2_reg;
                icmp_ln7_1_reg_401_pp0_iter40_reg <= icmp_ln7_1_reg_401_pp0_iter39_reg;
                icmp_ln7_1_reg_401_pp0_iter41_reg <= icmp_ln7_1_reg_401_pp0_iter40_reg;
                icmp_ln7_1_reg_401_pp0_iter42_reg <= icmp_ln7_1_reg_401_pp0_iter41_reg;
                icmp_ln7_1_reg_401_pp0_iter43_reg <= icmp_ln7_1_reg_401_pp0_iter42_reg;
                icmp_ln7_1_reg_401_pp0_iter44_reg <= icmp_ln7_1_reg_401_pp0_iter43_reg;
                icmp_ln7_1_reg_401_pp0_iter45_reg <= icmp_ln7_1_reg_401_pp0_iter44_reg;
                icmp_ln7_1_reg_401_pp0_iter46_reg <= icmp_ln7_1_reg_401_pp0_iter45_reg;
                icmp_ln7_1_reg_401_pp0_iter47_reg <= icmp_ln7_1_reg_401_pp0_iter46_reg;
                icmp_ln7_1_reg_401_pp0_iter48_reg <= icmp_ln7_1_reg_401_pp0_iter47_reg;
                icmp_ln7_1_reg_401_pp0_iter49_reg <= icmp_ln7_1_reg_401_pp0_iter48_reg;
                icmp_ln7_1_reg_401_pp0_iter4_reg <= icmp_ln7_1_reg_401_pp0_iter3_reg;
                icmp_ln7_1_reg_401_pp0_iter50_reg <= icmp_ln7_1_reg_401_pp0_iter49_reg;
                icmp_ln7_1_reg_401_pp0_iter51_reg <= icmp_ln7_1_reg_401_pp0_iter50_reg;
                icmp_ln7_1_reg_401_pp0_iter52_reg <= icmp_ln7_1_reg_401_pp0_iter51_reg;
                icmp_ln7_1_reg_401_pp0_iter53_reg <= icmp_ln7_1_reg_401_pp0_iter52_reg;
                icmp_ln7_1_reg_401_pp0_iter54_reg <= icmp_ln7_1_reg_401_pp0_iter53_reg;
                icmp_ln7_1_reg_401_pp0_iter55_reg <= icmp_ln7_1_reg_401_pp0_iter54_reg;
                icmp_ln7_1_reg_401_pp0_iter56_reg <= icmp_ln7_1_reg_401_pp0_iter55_reg;
                icmp_ln7_1_reg_401_pp0_iter57_reg <= icmp_ln7_1_reg_401_pp0_iter56_reg;
                icmp_ln7_1_reg_401_pp0_iter58_reg <= icmp_ln7_1_reg_401_pp0_iter57_reg;
                icmp_ln7_1_reg_401_pp0_iter59_reg <= icmp_ln7_1_reg_401_pp0_iter58_reg;
                icmp_ln7_1_reg_401_pp0_iter5_reg <= icmp_ln7_1_reg_401_pp0_iter4_reg;
                icmp_ln7_1_reg_401_pp0_iter60_reg <= icmp_ln7_1_reg_401_pp0_iter59_reg;
                icmp_ln7_1_reg_401_pp0_iter61_reg <= icmp_ln7_1_reg_401_pp0_iter60_reg;
                icmp_ln7_1_reg_401_pp0_iter62_reg <= icmp_ln7_1_reg_401_pp0_iter61_reg;
                icmp_ln7_1_reg_401_pp0_iter63_reg <= icmp_ln7_1_reg_401_pp0_iter62_reg;
                icmp_ln7_1_reg_401_pp0_iter64_reg <= icmp_ln7_1_reg_401_pp0_iter63_reg;
                icmp_ln7_1_reg_401_pp0_iter65_reg <= icmp_ln7_1_reg_401_pp0_iter64_reg;
                icmp_ln7_1_reg_401_pp0_iter66_reg <= icmp_ln7_1_reg_401_pp0_iter65_reg;
                icmp_ln7_1_reg_401_pp0_iter67_reg <= icmp_ln7_1_reg_401_pp0_iter66_reg;
                icmp_ln7_1_reg_401_pp0_iter68_reg <= icmp_ln7_1_reg_401_pp0_iter67_reg;
                icmp_ln7_1_reg_401_pp0_iter69_reg <= icmp_ln7_1_reg_401_pp0_iter68_reg;
                icmp_ln7_1_reg_401_pp0_iter6_reg <= icmp_ln7_1_reg_401_pp0_iter5_reg;
                icmp_ln7_1_reg_401_pp0_iter70_reg <= icmp_ln7_1_reg_401_pp0_iter69_reg;
                icmp_ln7_1_reg_401_pp0_iter71_reg <= icmp_ln7_1_reg_401_pp0_iter70_reg;
                icmp_ln7_1_reg_401_pp0_iter7_reg <= icmp_ln7_1_reg_401_pp0_iter6_reg;
                icmp_ln7_1_reg_401_pp0_iter8_reg <= icmp_ln7_1_reg_401_pp0_iter7_reg;
                icmp_ln7_1_reg_401_pp0_iter9_reg <= icmp_ln7_1_reg_401_pp0_iter8_reg;
                icmp_ln7_reg_375 <= icmp_ln7_fu_202_p2;
                trunc_ln9_2_reg_396 <= trunc_ln9_2_fu_279_p1;
                trunc_ln9_2_reg_396_pp0_iter10_reg <= trunc_ln9_2_reg_396_pp0_iter9_reg;
                trunc_ln9_2_reg_396_pp0_iter11_reg <= trunc_ln9_2_reg_396_pp0_iter10_reg;
                trunc_ln9_2_reg_396_pp0_iter12_reg <= trunc_ln9_2_reg_396_pp0_iter11_reg;
                trunc_ln9_2_reg_396_pp0_iter13_reg <= trunc_ln9_2_reg_396_pp0_iter12_reg;
                trunc_ln9_2_reg_396_pp0_iter14_reg <= trunc_ln9_2_reg_396_pp0_iter13_reg;
                trunc_ln9_2_reg_396_pp0_iter15_reg <= trunc_ln9_2_reg_396_pp0_iter14_reg;
                trunc_ln9_2_reg_396_pp0_iter16_reg <= trunc_ln9_2_reg_396_pp0_iter15_reg;
                trunc_ln9_2_reg_396_pp0_iter17_reg <= trunc_ln9_2_reg_396_pp0_iter16_reg;
                trunc_ln9_2_reg_396_pp0_iter18_reg <= trunc_ln9_2_reg_396_pp0_iter17_reg;
                trunc_ln9_2_reg_396_pp0_iter19_reg <= trunc_ln9_2_reg_396_pp0_iter18_reg;
                trunc_ln9_2_reg_396_pp0_iter1_reg <= trunc_ln9_2_reg_396;
                trunc_ln9_2_reg_396_pp0_iter20_reg <= trunc_ln9_2_reg_396_pp0_iter19_reg;
                trunc_ln9_2_reg_396_pp0_iter21_reg <= trunc_ln9_2_reg_396_pp0_iter20_reg;
                trunc_ln9_2_reg_396_pp0_iter22_reg <= trunc_ln9_2_reg_396_pp0_iter21_reg;
                trunc_ln9_2_reg_396_pp0_iter23_reg <= trunc_ln9_2_reg_396_pp0_iter22_reg;
                trunc_ln9_2_reg_396_pp0_iter24_reg <= trunc_ln9_2_reg_396_pp0_iter23_reg;
                trunc_ln9_2_reg_396_pp0_iter25_reg <= trunc_ln9_2_reg_396_pp0_iter24_reg;
                trunc_ln9_2_reg_396_pp0_iter26_reg <= trunc_ln9_2_reg_396_pp0_iter25_reg;
                trunc_ln9_2_reg_396_pp0_iter27_reg <= trunc_ln9_2_reg_396_pp0_iter26_reg;
                trunc_ln9_2_reg_396_pp0_iter28_reg <= trunc_ln9_2_reg_396_pp0_iter27_reg;
                trunc_ln9_2_reg_396_pp0_iter29_reg <= trunc_ln9_2_reg_396_pp0_iter28_reg;
                trunc_ln9_2_reg_396_pp0_iter2_reg <= trunc_ln9_2_reg_396_pp0_iter1_reg;
                trunc_ln9_2_reg_396_pp0_iter30_reg <= trunc_ln9_2_reg_396_pp0_iter29_reg;
                trunc_ln9_2_reg_396_pp0_iter31_reg <= trunc_ln9_2_reg_396_pp0_iter30_reg;
                trunc_ln9_2_reg_396_pp0_iter32_reg <= trunc_ln9_2_reg_396_pp0_iter31_reg;
                trunc_ln9_2_reg_396_pp0_iter33_reg <= trunc_ln9_2_reg_396_pp0_iter32_reg;
                trunc_ln9_2_reg_396_pp0_iter34_reg <= trunc_ln9_2_reg_396_pp0_iter33_reg;
                trunc_ln9_2_reg_396_pp0_iter35_reg <= trunc_ln9_2_reg_396_pp0_iter34_reg;
                trunc_ln9_2_reg_396_pp0_iter36_reg <= trunc_ln9_2_reg_396_pp0_iter35_reg;
                trunc_ln9_2_reg_396_pp0_iter3_reg <= trunc_ln9_2_reg_396_pp0_iter2_reg;
                trunc_ln9_2_reg_396_pp0_iter4_reg <= trunc_ln9_2_reg_396_pp0_iter3_reg;
                trunc_ln9_2_reg_396_pp0_iter5_reg <= trunc_ln9_2_reg_396_pp0_iter4_reg;
                trunc_ln9_2_reg_396_pp0_iter6_reg <= trunc_ln9_2_reg_396_pp0_iter5_reg;
                trunc_ln9_2_reg_396_pp0_iter7_reg <= trunc_ln9_2_reg_396_pp0_iter6_reg;
                trunc_ln9_2_reg_396_pp0_iter8_reg <= trunc_ln9_2_reg_396_pp0_iter7_reg;
                trunc_ln9_2_reg_396_pp0_iter9_reg <= trunc_ln9_2_reg_396_pp0_iter8_reg;
                trunc_ln9_3_reg_420 <= trunc_ln9_3_fu_329_p1;
                trunc_ln9_reg_385 <= trunc_ln9_fu_250_p1;
                trunc_ln9_reg_385_pp0_iter10_reg <= trunc_ln9_reg_385_pp0_iter9_reg;
                trunc_ln9_reg_385_pp0_iter11_reg <= trunc_ln9_reg_385_pp0_iter10_reg;
                trunc_ln9_reg_385_pp0_iter12_reg <= trunc_ln9_reg_385_pp0_iter11_reg;
                trunc_ln9_reg_385_pp0_iter13_reg <= trunc_ln9_reg_385_pp0_iter12_reg;
                trunc_ln9_reg_385_pp0_iter14_reg <= trunc_ln9_reg_385_pp0_iter13_reg;
                trunc_ln9_reg_385_pp0_iter15_reg <= trunc_ln9_reg_385_pp0_iter14_reg;
                trunc_ln9_reg_385_pp0_iter16_reg <= trunc_ln9_reg_385_pp0_iter15_reg;
                trunc_ln9_reg_385_pp0_iter17_reg <= trunc_ln9_reg_385_pp0_iter16_reg;
                trunc_ln9_reg_385_pp0_iter18_reg <= trunc_ln9_reg_385_pp0_iter17_reg;
                trunc_ln9_reg_385_pp0_iter19_reg <= trunc_ln9_reg_385_pp0_iter18_reg;
                trunc_ln9_reg_385_pp0_iter1_reg <= trunc_ln9_reg_385;
                trunc_ln9_reg_385_pp0_iter20_reg <= trunc_ln9_reg_385_pp0_iter19_reg;
                trunc_ln9_reg_385_pp0_iter21_reg <= trunc_ln9_reg_385_pp0_iter20_reg;
                trunc_ln9_reg_385_pp0_iter22_reg <= trunc_ln9_reg_385_pp0_iter21_reg;
                trunc_ln9_reg_385_pp0_iter23_reg <= trunc_ln9_reg_385_pp0_iter22_reg;
                trunc_ln9_reg_385_pp0_iter24_reg <= trunc_ln9_reg_385_pp0_iter23_reg;
                trunc_ln9_reg_385_pp0_iter25_reg <= trunc_ln9_reg_385_pp0_iter24_reg;
                trunc_ln9_reg_385_pp0_iter26_reg <= trunc_ln9_reg_385_pp0_iter25_reg;
                trunc_ln9_reg_385_pp0_iter27_reg <= trunc_ln9_reg_385_pp0_iter26_reg;
                trunc_ln9_reg_385_pp0_iter28_reg <= trunc_ln9_reg_385_pp0_iter27_reg;
                trunc_ln9_reg_385_pp0_iter29_reg <= trunc_ln9_reg_385_pp0_iter28_reg;
                trunc_ln9_reg_385_pp0_iter2_reg <= trunc_ln9_reg_385_pp0_iter1_reg;
                trunc_ln9_reg_385_pp0_iter30_reg <= trunc_ln9_reg_385_pp0_iter29_reg;
                trunc_ln9_reg_385_pp0_iter31_reg <= trunc_ln9_reg_385_pp0_iter30_reg;
                trunc_ln9_reg_385_pp0_iter32_reg <= trunc_ln9_reg_385_pp0_iter31_reg;
                trunc_ln9_reg_385_pp0_iter33_reg <= trunc_ln9_reg_385_pp0_iter32_reg;
                trunc_ln9_reg_385_pp0_iter34_reg <= trunc_ln9_reg_385_pp0_iter33_reg;
                trunc_ln9_reg_385_pp0_iter35_reg <= trunc_ln9_reg_385_pp0_iter34_reg;
                trunc_ln9_reg_385_pp0_iter36_reg <= trunc_ln9_reg_385_pp0_iter35_reg;
                trunc_ln9_reg_385_pp0_iter3_reg <= trunc_ln9_reg_385_pp0_iter2_reg;
                trunc_ln9_reg_385_pp0_iter4_reg <= trunc_ln9_reg_385_pp0_iter3_reg;
                trunc_ln9_reg_385_pp0_iter5_reg <= trunc_ln9_reg_385_pp0_iter4_reg;
                trunc_ln9_reg_385_pp0_iter6_reg <= trunc_ln9_reg_385_pp0_iter5_reg;
                trunc_ln9_reg_385_pp0_iter7_reg <= trunc_ln9_reg_385_pp0_iter6_reg;
                trunc_ln9_reg_385_pp0_iter8_reg <= trunc_ln9_reg_385_pp0_iter7_reg;
                trunc_ln9_reg_385_pp0_iter9_reg <= trunc_ln9_reg_385_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                gmem_addr_2_read_reg_415 <= gmem_RDATA;
                mul_ln9_reg_425 <= mul_ln9_fu_339_p2;
                trunc_ln9_1_reg_410 <= trunc_ln9_1_fu_309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_reg_369 <= sext_ln7_fu_184_p1;
                x_read_reg_357 <= x;
                y_read_reg_352 <= y;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter1, ap_block_state1, icmp_ln7_fu_202_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter71)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln7_fu_202_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln7_fu_202_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state147;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln7_fu_207_p2 <= std_logic_vector(unsigned(i_fu_94) + unsigned(ap_const_lv32_1));
    add_ln9_1_fu_254_p2 <= std_logic_vector(unsigned(zext_ln9_fu_221_p1) + unsigned(y_read_reg_352));
    add_ln9_fu_225_p2 <= std_logic_vector(unsigned(zext_ln9_fu_221_p1) + unsigned(x_read_reg_357));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state147 <= ap_CS_fsm(3);
    ap_ST_fsm_state147_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter36, ap_block_state74_pp0_stage0_iter36, ap_block_state146_pp0_stage0_iter72)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_boolean_1 = ap_block_state146_pp0_stage0_iter72) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state74_pp0_stage0_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter1, gmem_WREADY, gmem_ARREADY, ap_block_state74_pp0_stage0_iter36, ap_block_state146_pp0_stage0_iter72)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state146_pp0_stage0_iter72) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1)) or ((gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state74_pp0_stage0_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter1, gmem_WREADY, gmem_ARREADY, ap_block_state74_pp0_stage0_iter36, ap_block_state146_pp0_stage0_iter72)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state146_pp0_stage0_iter72) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1)) or ((gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state74_pp0_stage0_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter36, ap_block_state3_io, ap_block_state75_pp0_stage1_iter36)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_boolean_1 = ap_block_state75_pp0_stage1_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter36, ap_block_state3_io, ap_block_state75_pp0_stage1_iter36)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_boolean_1 = ap_block_state75_pp0_stage1_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state146_pp0_stage0_iter72_assign_proc : process(icmp_ln7_1_reg_401_pp0_iter71_reg, gmem_BVALID)
    begin
                ap_block_state146_pp0_stage0_iter72 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln7_1_reg_401_pp0_iter71_reg = ap_const_lv1_1));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln7_reg_375, gmem_AWREADY, gmem_ARREADY, ap_predicate_op194_writereq_state3)
    begin
                ap_block_state3_io <= (((ap_predicate_op194_writereq_state3 = ap_const_boolean_1) and (gmem_AWREADY = ap_const_logic_0)) or ((icmp_ln7_reg_375 = ap_const_lv1_0) and (gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_state74_pp0_stage0_iter36_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state74_pp0_stage0_iter36 <= (gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state75_pp0_stage1_iter36_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state75_pp0_stage1_iter36 <= (gmem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln7_fu_202_p2)
    begin
        if ((icmp_ln7_fu_202_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op194_writereq_state3_assign_proc : process(icmp_ln7_reg_375, first_iter_0_reg_161)
    begin
                ap_predicate_op194_writereq_state3 <= ((icmp_ln7_reg_375 = ap_const_lv1_0) and (first_iter_0_reg_161 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln7_reg_375, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, gmem_addr_1_reg_379, gmem_addr_2_reg_390, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem_ARADDR <= gmem_addr_2_reg_390;
        elsif (((icmp_ln7_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_ARADDR <= gmem_addr_1_reg_379;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln7_reg_375, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln7_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_predicate_op194_writereq_state3, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op194_writereq_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter72, icmp_ln7_1_reg_401_pp0_iter71_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_1_reg_401_pp0_iter71_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter36, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter38, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln7_reg_375, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln7_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln7_reg_375, first_iter_0_reg_161)
    begin
        if (((icmp_ln7_reg_375 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (first_iter_0_reg_161 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter72, icmp_ln7_1_reg_401_pp0_iter71_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln7_1_reg_401_pp0_iter71_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter36)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter38, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln7_1_fu_283_p2 <= "1" when (add_ln7_fu_207_p2 = N) else "0";
    icmp_ln7_fu_202_p2 <= "1" when (i_fu_94 = N) else "0";
    lshr_ln9_1_fu_324_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_2_read_reg_415),to_integer(unsigned('0' & zext_ln9_2_fu_320_p1(31-1 downto 0)))));
    lshr_ln9_fu_304_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_1_read_reg_405),to_integer(unsigned('0' & zext_ln9_1_fu_300_p1(31-1 downto 0)))));
        sext_ln7_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_174_p4),64));

        sext_ln9_2_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_4_fu_230_p4),64));

        sext_ln9_3_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_5_fu_259_p4),64));

    shl_ln9_1_fu_293_p3 <= (trunc_ln9_reg_385_pp0_iter36_reg & ap_const_lv3_0);
    shl_ln9_2_fu_313_p3 <= (trunc_ln9_2_reg_396_pp0_iter36_reg & ap_const_lv3_0);
    shl_ln9_fu_213_p3 <= (i_fu_94 & ap_const_lv1_0);
    trunc_ln7_fu_174_p4 <= z(63 downto 2);
    trunc_ln9_1_fu_309_p1 <= lshr_ln9_fu_304_p2(16 - 1 downto 0);
    trunc_ln9_2_fu_279_p1 <= add_ln9_1_fu_254_p2(2 - 1 downto 0);
    trunc_ln9_3_fu_329_p1 <= lshr_ln9_1_fu_324_p2(16 - 1 downto 0);
    trunc_ln9_4_fu_230_p4 <= add_ln9_fu_225_p2(63 downto 2);
    trunc_ln9_5_fu_259_p4 <= add_ln9_1_fu_254_p2(63 downto 2);
    trunc_ln9_fu_250_p1 <= add_ln9_fu_225_p2(2 - 1 downto 0);
    zext_ln9_1_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_1_fu_293_p3),32));
    zext_ln9_2_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_2_fu_313_p3),32));
    zext_ln9_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln9_fu_213_p3),64));
end behav;
