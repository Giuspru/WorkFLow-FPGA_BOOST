// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="func_func,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.777000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.027210,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1740,HLS_SYN_LUT=1880,HLS_VERSION=2023_2}" *)

module func (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state147 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] N;
wire   [63:0] x;
wire   [63:0] y;
wire   [63:0] z;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln7_reg_375;
reg   [0:0] first_iter_0_reg_161;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter38;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter72;
reg   [0:0] icmp_ln7_1_reg_401;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter71_reg;
reg    gmem_blk_n_AR;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter1;
reg   [63:0] y_read_reg_352;
reg    ap_block_state1;
reg   [63:0] x_read_reg_357;
reg   [63:0] gmem_addr_reg_369;
wire   [0:0] icmp_ln7_fu_202_p2;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg    ap_block_state74_pp0_stage0_iter36;
reg    ap_block_state146_pp0_stage0_iter72;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] gmem_addr_1_reg_379;
wire   [1:0] trunc_ln9_fu_250_p1;
reg   [1:0] trunc_ln9_reg_385;
reg   [1:0] trunc_ln9_reg_385_pp0_iter1_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter2_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter3_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter4_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter5_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter6_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter7_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter8_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter9_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter10_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter11_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter12_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter13_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter14_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter15_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter16_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter17_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter18_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter19_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter20_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter21_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter22_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter23_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter24_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter25_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter26_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter27_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter28_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter29_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter30_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter31_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter32_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter33_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter34_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter35_reg;
reg   [1:0] trunc_ln9_reg_385_pp0_iter36_reg;
reg   [63:0] gmem_addr_2_reg_390;
wire   [1:0] trunc_ln9_2_fu_279_p1;
reg   [1:0] trunc_ln9_2_reg_396;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter1_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter2_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter3_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter4_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter5_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter6_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter7_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter8_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter9_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter10_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter11_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter12_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter13_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter14_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter15_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter16_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter17_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter18_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter19_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter20_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter21_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter22_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter23_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter24_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter25_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter26_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter27_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter28_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter29_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter30_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter31_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter32_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter33_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter34_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter35_reg;
reg   [1:0] trunc_ln9_2_reg_396_pp0_iter36_reg;
wire   [0:0] icmp_ln7_1_fu_283_p2;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter1_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter2_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter3_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter4_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter5_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter6_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter7_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter8_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter9_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter10_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter11_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter12_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter13_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter14_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter15_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter16_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter17_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter18_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter19_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter20_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter21_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter22_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter23_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter24_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter25_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter26_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter27_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter28_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter29_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter30_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter31_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter32_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter33_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter34_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter35_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter36_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter37_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter38_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter39_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter40_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter41_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter42_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter43_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter44_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter45_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter46_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter47_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter48_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter49_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter50_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter51_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter52_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter53_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter54_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter55_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter56_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter57_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter58_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter59_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter60_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter61_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter62_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter63_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter64_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter65_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter66_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter67_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter68_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter69_reg;
reg   [0:0] icmp_ln7_1_reg_401_pp0_iter70_reg;
reg   [31:0] gmem_addr_1_read_reg_405;
wire   [15:0] trunc_ln9_1_fu_309_p1;
reg  signed [15:0] trunc_ln9_1_reg_410;
reg    ap_predicate_op194_writereq_state3;
reg    ap_block_state3_io;
reg    ap_block_state75_pp0_stage1_iter36;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] gmem_addr_2_read_reg_415;
wire   [15:0] trunc_ln9_3_fu_329_p1;
reg  signed [15:0] trunc_ln9_3_reg_420;
wire   [31:0] mul_ln9_fu_339_p2;
reg   [31:0] mul_ln9_reg_425;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
wire  signed [63:0] sext_ln7_fu_184_p1;
wire  signed [63:0] sext_ln9_2_fu_240_p1;
wire  signed [63:0] sext_ln9_3_fu_269_p1;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] i_fu_94;
wire   [31:0] add_ln7_fu_207_p2;
wire   [61:0] trunc_ln7_fu_174_p4;
wire   [32:0] shl_ln9_fu_213_p3;
wire   [63:0] zext_ln9_fu_221_p1;
wire   [63:0] add_ln9_fu_225_p2;
wire   [61:0] trunc_ln9_4_fu_230_p4;
wire   [63:0] add_ln9_1_fu_254_p2;
wire   [61:0] trunc_ln9_5_fu_259_p4;
wire   [4:0] shl_ln9_1_fu_293_p3;
wire   [31:0] zext_ln9_1_fu_300_p1;
wire   [31:0] lshr_ln9_fu_304_p2;
wire   [4:0] shl_ln9_2_fu_313_p3;
wire   [31:0] zext_ln9_2_fu_320_p1;
wire   [31:0] lshr_ln9_1_fu_324_p2;
wire    ap_CS_fsm_state147;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state147_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 i_fu_94 = 32'd0;
end

func_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .N(N),
    .x(x),
    .y(y),
    .z(z),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

func_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 70 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_369),
    .I_AWLEN(N),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(mul_ln9_reg_425),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

func_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U1(
    .din0(trunc_ln9_3_reg_420),
    .din1(trunc_ln9_1_reg_410),
    .dout(mul_ln9_fu_339_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state147)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter72 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        first_iter_0_reg_161 <= 1'd1;
    end else if (((icmp_ln7_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        first_iter_0_reg_161 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_94 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_fu_202_p2 == 1'd0))) begin
        i_fu_94 <= add_ln7_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_1_read_reg_405 <= gmem_RDATA;
        gmem_addr_1_reg_379 <= sext_ln9_2_fu_240_p1;
        gmem_addr_2_reg_390 <= sext_ln9_3_fu_269_p1;
        icmp_ln7_1_reg_401 <= icmp_ln7_1_fu_283_p2;
        icmp_ln7_1_reg_401_pp0_iter10_reg <= icmp_ln7_1_reg_401_pp0_iter9_reg;
        icmp_ln7_1_reg_401_pp0_iter11_reg <= icmp_ln7_1_reg_401_pp0_iter10_reg;
        icmp_ln7_1_reg_401_pp0_iter12_reg <= icmp_ln7_1_reg_401_pp0_iter11_reg;
        icmp_ln7_1_reg_401_pp0_iter13_reg <= icmp_ln7_1_reg_401_pp0_iter12_reg;
        icmp_ln7_1_reg_401_pp0_iter14_reg <= icmp_ln7_1_reg_401_pp0_iter13_reg;
        icmp_ln7_1_reg_401_pp0_iter15_reg <= icmp_ln7_1_reg_401_pp0_iter14_reg;
        icmp_ln7_1_reg_401_pp0_iter16_reg <= icmp_ln7_1_reg_401_pp0_iter15_reg;
        icmp_ln7_1_reg_401_pp0_iter17_reg <= icmp_ln7_1_reg_401_pp0_iter16_reg;
        icmp_ln7_1_reg_401_pp0_iter18_reg <= icmp_ln7_1_reg_401_pp0_iter17_reg;
        icmp_ln7_1_reg_401_pp0_iter19_reg <= icmp_ln7_1_reg_401_pp0_iter18_reg;
        icmp_ln7_1_reg_401_pp0_iter1_reg <= icmp_ln7_1_reg_401;
        icmp_ln7_1_reg_401_pp0_iter20_reg <= icmp_ln7_1_reg_401_pp0_iter19_reg;
        icmp_ln7_1_reg_401_pp0_iter21_reg <= icmp_ln7_1_reg_401_pp0_iter20_reg;
        icmp_ln7_1_reg_401_pp0_iter22_reg <= icmp_ln7_1_reg_401_pp0_iter21_reg;
        icmp_ln7_1_reg_401_pp0_iter23_reg <= icmp_ln7_1_reg_401_pp0_iter22_reg;
        icmp_ln7_1_reg_401_pp0_iter24_reg <= icmp_ln7_1_reg_401_pp0_iter23_reg;
        icmp_ln7_1_reg_401_pp0_iter25_reg <= icmp_ln7_1_reg_401_pp0_iter24_reg;
        icmp_ln7_1_reg_401_pp0_iter26_reg <= icmp_ln7_1_reg_401_pp0_iter25_reg;
        icmp_ln7_1_reg_401_pp0_iter27_reg <= icmp_ln7_1_reg_401_pp0_iter26_reg;
        icmp_ln7_1_reg_401_pp0_iter28_reg <= icmp_ln7_1_reg_401_pp0_iter27_reg;
        icmp_ln7_1_reg_401_pp0_iter29_reg <= icmp_ln7_1_reg_401_pp0_iter28_reg;
        icmp_ln7_1_reg_401_pp0_iter2_reg <= icmp_ln7_1_reg_401_pp0_iter1_reg;
        icmp_ln7_1_reg_401_pp0_iter30_reg <= icmp_ln7_1_reg_401_pp0_iter29_reg;
        icmp_ln7_1_reg_401_pp0_iter31_reg <= icmp_ln7_1_reg_401_pp0_iter30_reg;
        icmp_ln7_1_reg_401_pp0_iter32_reg <= icmp_ln7_1_reg_401_pp0_iter31_reg;
        icmp_ln7_1_reg_401_pp0_iter33_reg <= icmp_ln7_1_reg_401_pp0_iter32_reg;
        icmp_ln7_1_reg_401_pp0_iter34_reg <= icmp_ln7_1_reg_401_pp0_iter33_reg;
        icmp_ln7_1_reg_401_pp0_iter35_reg <= icmp_ln7_1_reg_401_pp0_iter34_reg;
        icmp_ln7_1_reg_401_pp0_iter36_reg <= icmp_ln7_1_reg_401_pp0_iter35_reg;
        icmp_ln7_1_reg_401_pp0_iter37_reg <= icmp_ln7_1_reg_401_pp0_iter36_reg;
        icmp_ln7_1_reg_401_pp0_iter38_reg <= icmp_ln7_1_reg_401_pp0_iter37_reg;
        icmp_ln7_1_reg_401_pp0_iter39_reg <= icmp_ln7_1_reg_401_pp0_iter38_reg;
        icmp_ln7_1_reg_401_pp0_iter3_reg <= icmp_ln7_1_reg_401_pp0_iter2_reg;
        icmp_ln7_1_reg_401_pp0_iter40_reg <= icmp_ln7_1_reg_401_pp0_iter39_reg;
        icmp_ln7_1_reg_401_pp0_iter41_reg <= icmp_ln7_1_reg_401_pp0_iter40_reg;
        icmp_ln7_1_reg_401_pp0_iter42_reg <= icmp_ln7_1_reg_401_pp0_iter41_reg;
        icmp_ln7_1_reg_401_pp0_iter43_reg <= icmp_ln7_1_reg_401_pp0_iter42_reg;
        icmp_ln7_1_reg_401_pp0_iter44_reg <= icmp_ln7_1_reg_401_pp0_iter43_reg;
        icmp_ln7_1_reg_401_pp0_iter45_reg <= icmp_ln7_1_reg_401_pp0_iter44_reg;
        icmp_ln7_1_reg_401_pp0_iter46_reg <= icmp_ln7_1_reg_401_pp0_iter45_reg;
        icmp_ln7_1_reg_401_pp0_iter47_reg <= icmp_ln7_1_reg_401_pp0_iter46_reg;
        icmp_ln7_1_reg_401_pp0_iter48_reg <= icmp_ln7_1_reg_401_pp0_iter47_reg;
        icmp_ln7_1_reg_401_pp0_iter49_reg <= icmp_ln7_1_reg_401_pp0_iter48_reg;
        icmp_ln7_1_reg_401_pp0_iter4_reg <= icmp_ln7_1_reg_401_pp0_iter3_reg;
        icmp_ln7_1_reg_401_pp0_iter50_reg <= icmp_ln7_1_reg_401_pp0_iter49_reg;
        icmp_ln7_1_reg_401_pp0_iter51_reg <= icmp_ln7_1_reg_401_pp0_iter50_reg;
        icmp_ln7_1_reg_401_pp0_iter52_reg <= icmp_ln7_1_reg_401_pp0_iter51_reg;
        icmp_ln7_1_reg_401_pp0_iter53_reg <= icmp_ln7_1_reg_401_pp0_iter52_reg;
        icmp_ln7_1_reg_401_pp0_iter54_reg <= icmp_ln7_1_reg_401_pp0_iter53_reg;
        icmp_ln7_1_reg_401_pp0_iter55_reg <= icmp_ln7_1_reg_401_pp0_iter54_reg;
        icmp_ln7_1_reg_401_pp0_iter56_reg <= icmp_ln7_1_reg_401_pp0_iter55_reg;
        icmp_ln7_1_reg_401_pp0_iter57_reg <= icmp_ln7_1_reg_401_pp0_iter56_reg;
        icmp_ln7_1_reg_401_pp0_iter58_reg <= icmp_ln7_1_reg_401_pp0_iter57_reg;
        icmp_ln7_1_reg_401_pp0_iter59_reg <= icmp_ln7_1_reg_401_pp0_iter58_reg;
        icmp_ln7_1_reg_401_pp0_iter5_reg <= icmp_ln7_1_reg_401_pp0_iter4_reg;
        icmp_ln7_1_reg_401_pp0_iter60_reg <= icmp_ln7_1_reg_401_pp0_iter59_reg;
        icmp_ln7_1_reg_401_pp0_iter61_reg <= icmp_ln7_1_reg_401_pp0_iter60_reg;
        icmp_ln7_1_reg_401_pp0_iter62_reg <= icmp_ln7_1_reg_401_pp0_iter61_reg;
        icmp_ln7_1_reg_401_pp0_iter63_reg <= icmp_ln7_1_reg_401_pp0_iter62_reg;
        icmp_ln7_1_reg_401_pp0_iter64_reg <= icmp_ln7_1_reg_401_pp0_iter63_reg;
        icmp_ln7_1_reg_401_pp0_iter65_reg <= icmp_ln7_1_reg_401_pp0_iter64_reg;
        icmp_ln7_1_reg_401_pp0_iter66_reg <= icmp_ln7_1_reg_401_pp0_iter65_reg;
        icmp_ln7_1_reg_401_pp0_iter67_reg <= icmp_ln7_1_reg_401_pp0_iter66_reg;
        icmp_ln7_1_reg_401_pp0_iter68_reg <= icmp_ln7_1_reg_401_pp0_iter67_reg;
        icmp_ln7_1_reg_401_pp0_iter69_reg <= icmp_ln7_1_reg_401_pp0_iter68_reg;
        icmp_ln7_1_reg_401_pp0_iter6_reg <= icmp_ln7_1_reg_401_pp0_iter5_reg;
        icmp_ln7_1_reg_401_pp0_iter70_reg <= icmp_ln7_1_reg_401_pp0_iter69_reg;
        icmp_ln7_1_reg_401_pp0_iter71_reg <= icmp_ln7_1_reg_401_pp0_iter70_reg;
        icmp_ln7_1_reg_401_pp0_iter7_reg <= icmp_ln7_1_reg_401_pp0_iter6_reg;
        icmp_ln7_1_reg_401_pp0_iter8_reg <= icmp_ln7_1_reg_401_pp0_iter7_reg;
        icmp_ln7_1_reg_401_pp0_iter9_reg <= icmp_ln7_1_reg_401_pp0_iter8_reg;
        icmp_ln7_reg_375 <= icmp_ln7_fu_202_p2;
        trunc_ln9_2_reg_396 <= trunc_ln9_2_fu_279_p1;
        trunc_ln9_2_reg_396_pp0_iter10_reg <= trunc_ln9_2_reg_396_pp0_iter9_reg;
        trunc_ln9_2_reg_396_pp0_iter11_reg <= trunc_ln9_2_reg_396_pp0_iter10_reg;
        trunc_ln9_2_reg_396_pp0_iter12_reg <= trunc_ln9_2_reg_396_pp0_iter11_reg;
        trunc_ln9_2_reg_396_pp0_iter13_reg <= trunc_ln9_2_reg_396_pp0_iter12_reg;
        trunc_ln9_2_reg_396_pp0_iter14_reg <= trunc_ln9_2_reg_396_pp0_iter13_reg;
        trunc_ln9_2_reg_396_pp0_iter15_reg <= trunc_ln9_2_reg_396_pp0_iter14_reg;
        trunc_ln9_2_reg_396_pp0_iter16_reg <= trunc_ln9_2_reg_396_pp0_iter15_reg;
        trunc_ln9_2_reg_396_pp0_iter17_reg <= trunc_ln9_2_reg_396_pp0_iter16_reg;
        trunc_ln9_2_reg_396_pp0_iter18_reg <= trunc_ln9_2_reg_396_pp0_iter17_reg;
        trunc_ln9_2_reg_396_pp0_iter19_reg <= trunc_ln9_2_reg_396_pp0_iter18_reg;
        trunc_ln9_2_reg_396_pp0_iter1_reg <= trunc_ln9_2_reg_396;
        trunc_ln9_2_reg_396_pp0_iter20_reg <= trunc_ln9_2_reg_396_pp0_iter19_reg;
        trunc_ln9_2_reg_396_pp0_iter21_reg <= trunc_ln9_2_reg_396_pp0_iter20_reg;
        trunc_ln9_2_reg_396_pp0_iter22_reg <= trunc_ln9_2_reg_396_pp0_iter21_reg;
        trunc_ln9_2_reg_396_pp0_iter23_reg <= trunc_ln9_2_reg_396_pp0_iter22_reg;
        trunc_ln9_2_reg_396_pp0_iter24_reg <= trunc_ln9_2_reg_396_pp0_iter23_reg;
        trunc_ln9_2_reg_396_pp0_iter25_reg <= trunc_ln9_2_reg_396_pp0_iter24_reg;
        trunc_ln9_2_reg_396_pp0_iter26_reg <= trunc_ln9_2_reg_396_pp0_iter25_reg;
        trunc_ln9_2_reg_396_pp0_iter27_reg <= trunc_ln9_2_reg_396_pp0_iter26_reg;
        trunc_ln9_2_reg_396_pp0_iter28_reg <= trunc_ln9_2_reg_396_pp0_iter27_reg;
        trunc_ln9_2_reg_396_pp0_iter29_reg <= trunc_ln9_2_reg_396_pp0_iter28_reg;
        trunc_ln9_2_reg_396_pp0_iter2_reg <= trunc_ln9_2_reg_396_pp0_iter1_reg;
        trunc_ln9_2_reg_396_pp0_iter30_reg <= trunc_ln9_2_reg_396_pp0_iter29_reg;
        trunc_ln9_2_reg_396_pp0_iter31_reg <= trunc_ln9_2_reg_396_pp0_iter30_reg;
        trunc_ln9_2_reg_396_pp0_iter32_reg <= trunc_ln9_2_reg_396_pp0_iter31_reg;
        trunc_ln9_2_reg_396_pp0_iter33_reg <= trunc_ln9_2_reg_396_pp0_iter32_reg;
        trunc_ln9_2_reg_396_pp0_iter34_reg <= trunc_ln9_2_reg_396_pp0_iter33_reg;
        trunc_ln9_2_reg_396_pp0_iter35_reg <= trunc_ln9_2_reg_396_pp0_iter34_reg;
        trunc_ln9_2_reg_396_pp0_iter36_reg <= trunc_ln9_2_reg_396_pp0_iter35_reg;
        trunc_ln9_2_reg_396_pp0_iter3_reg <= trunc_ln9_2_reg_396_pp0_iter2_reg;
        trunc_ln9_2_reg_396_pp0_iter4_reg <= trunc_ln9_2_reg_396_pp0_iter3_reg;
        trunc_ln9_2_reg_396_pp0_iter5_reg <= trunc_ln9_2_reg_396_pp0_iter4_reg;
        trunc_ln9_2_reg_396_pp0_iter6_reg <= trunc_ln9_2_reg_396_pp0_iter5_reg;
        trunc_ln9_2_reg_396_pp0_iter7_reg <= trunc_ln9_2_reg_396_pp0_iter6_reg;
        trunc_ln9_2_reg_396_pp0_iter8_reg <= trunc_ln9_2_reg_396_pp0_iter7_reg;
        trunc_ln9_2_reg_396_pp0_iter9_reg <= trunc_ln9_2_reg_396_pp0_iter8_reg;
        trunc_ln9_3_reg_420 <= trunc_ln9_3_fu_329_p1;
        trunc_ln9_reg_385 <= trunc_ln9_fu_250_p1;
        trunc_ln9_reg_385_pp0_iter10_reg <= trunc_ln9_reg_385_pp0_iter9_reg;
        trunc_ln9_reg_385_pp0_iter11_reg <= trunc_ln9_reg_385_pp0_iter10_reg;
        trunc_ln9_reg_385_pp0_iter12_reg <= trunc_ln9_reg_385_pp0_iter11_reg;
        trunc_ln9_reg_385_pp0_iter13_reg <= trunc_ln9_reg_385_pp0_iter12_reg;
        trunc_ln9_reg_385_pp0_iter14_reg <= trunc_ln9_reg_385_pp0_iter13_reg;
        trunc_ln9_reg_385_pp0_iter15_reg <= trunc_ln9_reg_385_pp0_iter14_reg;
        trunc_ln9_reg_385_pp0_iter16_reg <= trunc_ln9_reg_385_pp0_iter15_reg;
        trunc_ln9_reg_385_pp0_iter17_reg <= trunc_ln9_reg_385_pp0_iter16_reg;
        trunc_ln9_reg_385_pp0_iter18_reg <= trunc_ln9_reg_385_pp0_iter17_reg;
        trunc_ln9_reg_385_pp0_iter19_reg <= trunc_ln9_reg_385_pp0_iter18_reg;
        trunc_ln9_reg_385_pp0_iter1_reg <= trunc_ln9_reg_385;
        trunc_ln9_reg_385_pp0_iter20_reg <= trunc_ln9_reg_385_pp0_iter19_reg;
        trunc_ln9_reg_385_pp0_iter21_reg <= trunc_ln9_reg_385_pp0_iter20_reg;
        trunc_ln9_reg_385_pp0_iter22_reg <= trunc_ln9_reg_385_pp0_iter21_reg;
        trunc_ln9_reg_385_pp0_iter23_reg <= trunc_ln9_reg_385_pp0_iter22_reg;
        trunc_ln9_reg_385_pp0_iter24_reg <= trunc_ln9_reg_385_pp0_iter23_reg;
        trunc_ln9_reg_385_pp0_iter25_reg <= trunc_ln9_reg_385_pp0_iter24_reg;
        trunc_ln9_reg_385_pp0_iter26_reg <= trunc_ln9_reg_385_pp0_iter25_reg;
        trunc_ln9_reg_385_pp0_iter27_reg <= trunc_ln9_reg_385_pp0_iter26_reg;
        trunc_ln9_reg_385_pp0_iter28_reg <= trunc_ln9_reg_385_pp0_iter27_reg;
        trunc_ln9_reg_385_pp0_iter29_reg <= trunc_ln9_reg_385_pp0_iter28_reg;
        trunc_ln9_reg_385_pp0_iter2_reg <= trunc_ln9_reg_385_pp0_iter1_reg;
        trunc_ln9_reg_385_pp0_iter30_reg <= trunc_ln9_reg_385_pp0_iter29_reg;
        trunc_ln9_reg_385_pp0_iter31_reg <= trunc_ln9_reg_385_pp0_iter30_reg;
        trunc_ln9_reg_385_pp0_iter32_reg <= trunc_ln9_reg_385_pp0_iter31_reg;
        trunc_ln9_reg_385_pp0_iter33_reg <= trunc_ln9_reg_385_pp0_iter32_reg;
        trunc_ln9_reg_385_pp0_iter34_reg <= trunc_ln9_reg_385_pp0_iter33_reg;
        trunc_ln9_reg_385_pp0_iter35_reg <= trunc_ln9_reg_385_pp0_iter34_reg;
        trunc_ln9_reg_385_pp0_iter36_reg <= trunc_ln9_reg_385_pp0_iter35_reg;
        trunc_ln9_reg_385_pp0_iter3_reg <= trunc_ln9_reg_385_pp0_iter2_reg;
        trunc_ln9_reg_385_pp0_iter4_reg <= trunc_ln9_reg_385_pp0_iter3_reg;
        trunc_ln9_reg_385_pp0_iter5_reg <= trunc_ln9_reg_385_pp0_iter4_reg;
        trunc_ln9_reg_385_pp0_iter6_reg <= trunc_ln9_reg_385_pp0_iter5_reg;
        trunc_ln9_reg_385_pp0_iter7_reg <= trunc_ln9_reg_385_pp0_iter6_reg;
        trunc_ln9_reg_385_pp0_iter8_reg <= trunc_ln9_reg_385_pp0_iter7_reg;
        trunc_ln9_reg_385_pp0_iter9_reg <= trunc_ln9_reg_385_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_addr_2_read_reg_415 <= gmem_RDATA;
        mul_ln9_reg_425 <= mul_ln9_fu_339_p2;
        trunc_ln9_1_reg_410 <= trunc_ln9_1_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_addr_reg_369 <= sext_ln7_fu_184_p1;
        x_read_reg_357 <= x;
        y_read_reg_352 <= y;
    end
end

assign ap_ST_fsm_state147_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln7_fu_202_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 
    == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 
    == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_ARADDR = gmem_addr_2_reg_390;
    end else if (((icmp_ln7_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_ARADDR = gmem_addr_1_reg_379;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln7_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op194_writereq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_1_reg_401_pp0_iter71_reg == 1'd1) & (ap_enable_reg_pp0_iter72 == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter38 == 1'b1))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln7_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln7_reg_375 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (first_iter_0_reg_161 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_1_reg_401_pp0_iter71_reg == 1'd1) & (ap_enable_reg_pp0_iter72 == 1'b1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter38 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter72 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_202_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter72 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln7_fu_207_p2 = (i_fu_94 + 32'd1);

assign add_ln9_1_fu_254_p2 = (zext_ln9_fu_221_p1 + y_read_reg_352);

assign add_ln9_fu_225_p2 = (zext_ln9_fu_221_p1 + x_read_reg_357);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == ap_block_state146_pp0_stage0_iter72) & (ap_enable_reg_pp0_iter72 == 1'b1)) | ((1'b1 == ap_block_state74_pp0_stage0_iter36) & (ap_enable_reg_pp0_iter36 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state146_pp0_stage0_iter72) & (ap_enable_reg_pp0_iter72 == 1'b1)) | ((gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b1)) | ((1'b1 == ap_block_state74_pp0_stage0_iter36) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state146_pp0_stage0_iter72) & (ap_enable_reg_pp0_iter72 == 1'b1)) | ((gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b1)) | ((1'b1 == ap_block_state74_pp0_stage0_iter36) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_block_state75_pp0_stage1_iter36) & (ap_enable_reg_pp0_iter36 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_block_state75_pp0_stage1_iter36) & (ap_enable_reg_pp0_iter36 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state146_pp0_stage0_iter72 = ((gmem_BVALID == 1'b0) & (icmp_ln7_1_reg_401_pp0_iter71_reg == 1'd1));
end

always @ (*) begin
    ap_block_state3_io = (((ap_predicate_op194_writereq_state3 == 1'b1) & (gmem_AWREADY == 1'b0)) | ((icmp_ln7_reg_375 == 1'd0) & (gmem_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state74_pp0_stage0_iter36 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state75_pp0_stage1_iter36 = (gmem_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op194_writereq_state3 = ((icmp_ln7_reg_375 == 1'd0) & (first_iter_0_reg_161 == 1'd1));
end

assign icmp_ln7_1_fu_283_p2 = ((add_ln7_fu_207_p2 == N) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_202_p2 = ((i_fu_94 == N) ? 1'b1 : 1'b0);

assign lshr_ln9_1_fu_324_p2 = gmem_addr_2_read_reg_415 >> zext_ln9_2_fu_320_p1;

assign lshr_ln9_fu_304_p2 = gmem_addr_1_read_reg_405 >> zext_ln9_1_fu_300_p1;

assign sext_ln7_fu_184_p1 = $signed(trunc_ln7_fu_174_p4);

assign sext_ln9_2_fu_240_p1 = $signed(trunc_ln9_4_fu_230_p4);

assign sext_ln9_3_fu_269_p1 = $signed(trunc_ln9_5_fu_259_p4);

assign shl_ln9_1_fu_293_p3 = {{trunc_ln9_reg_385_pp0_iter36_reg}, {3'd0}};

assign shl_ln9_2_fu_313_p3 = {{trunc_ln9_2_reg_396_pp0_iter36_reg}, {3'd0}};

assign shl_ln9_fu_213_p3 = {{i_fu_94}, {1'd0}};

assign trunc_ln7_fu_174_p4 = {{z[63:2]}};

assign trunc_ln9_1_fu_309_p1 = lshr_ln9_fu_304_p2[15:0];

assign trunc_ln9_2_fu_279_p1 = add_ln9_1_fu_254_p2[1:0];

assign trunc_ln9_3_fu_329_p1 = lshr_ln9_1_fu_324_p2[15:0];

assign trunc_ln9_4_fu_230_p4 = {{add_ln9_fu_225_p2[63:2]}};

assign trunc_ln9_5_fu_259_p4 = {{add_ln9_1_fu_254_p2[63:2]}};

assign trunc_ln9_fu_250_p1 = add_ln9_fu_225_p2[1:0];

assign zext_ln9_1_fu_300_p1 = shl_ln9_1_fu_293_p3;

assign zext_ln9_2_fu_320_p1 = shl_ln9_2_fu_313_p3;

assign zext_ln9_fu_221_p1 = shl_ln9_fu_213_p3;

endmodule //func
